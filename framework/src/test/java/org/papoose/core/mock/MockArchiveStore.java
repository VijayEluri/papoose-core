/**
 *  Copyright 2008-2009 Picateers Inc., 1720 S. Amphlett Boulevard  Suite 320, San Mateo, CA 94402 U.S.A. All rights reserved.
 */
package org.papoose.core.mock;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.Permission;
import java.security.cert.Certificate;
import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.SortedSet;
import java.util.jar.Attributes;

import org.apache.xbean.classloader.ResourceLocation;
import org.osgi.framework.BundleException;
import org.osgi.framework.Version;

import org.papoose.core.FragmentAttachment;
import org.papoose.core.L18nResourceBundle;
import org.papoose.core.descriptions.DynamicDescription;
import org.papoose.core.descriptions.ExportDescription;
import org.papoose.core.descriptions.FragmentDescription;
import org.papoose.core.descriptions.ImportDescription;
import org.papoose.core.descriptions.LazyActivationDescription;
import org.papoose.core.descriptions.NativeCodeDescription;
import org.papoose.core.descriptions.RequireDescription;
import org.papoose.core.spi.ArchiveStore;

/**
 * @version $Revision$ $Date$
 */
public class MockArchiveStore implements ArchiveStore
{
    public String getFrameworkName()
    {
        return null;  //todo: consider this autogenerated code
    }

    public long getBundleId()
    {
        return 0;  //todo: consider this autogenerated code
    }

    public int getGeneration()
    {
        return 0;  //todo: consider this autogenerated code
    }

    public Attributes getAttributes()
    {
        Attributes result = new Attributes();

        result.put(new Attributes.Name("Manifest-Version"), "1.0");
        result.put(new Attributes.Name("Bundle-Activator"), "com.acme.impl.Activator");
        result.put(new Attributes.Name("Created-By"), "1.5.0_13 (Apple Inc.)");
        result.put(new Attributes.Name("Import-Package"), "com.acme.api,org.osgi.framework");
        result.put(new Attributes.Name("L10N-Bundle"), "%bundle");
        result.put(new Attributes.Name("Include-Resource"), "src/main/resources");
        result.put(new Attributes.Name("Bnd-LastModified"), "1208018376942");
        result.put(new Attributes.Name("Export-Package"), "com.acme.api");
        result.put(new Attributes.Name("Bundle-Version"), "1.0.0.SNAPSHOT");
        result.put(new Attributes.Name("Bundle-Name"), "Papoose :: OSGi R4 test bundle");
        result.put(new Attributes.Name("Bundle-Description"), "OSGi R4 Test Bundle");
        result.put(new Attributes.Name("Bundle-Classpath"), ".,lib/test.jar");
        result.put(new Attributes.Name("Private-Package"), "OSGI-INF.l10n,com.acme,com.acme.impl,com.acme.pvt,com.acme.resource,com.acme.safe,lib");
        result.put(new Attributes.Name("L10N-Test"), "%test");
        result.put(new Attributes.Name("Bundle-ManifestVersion"), "2");
        result.put(new Attributes.Name("L10N-NoTranslation"), "%no translation for this entry");
        result.put(new Attributes.Name("Bundle-SymbolicName"), "org.papoose.test.papoose-test-bundle");
        result.put(new Attributes.Name("Tool"), "Bnd-0.0.160");

        return result;
    }

    public String getBundleActivatorClass()
    {
        return "com.acme.impl.Activator";
    }

    public String getBundleSymbolicName()
    {
        return "org.papoose.test.papoose-test-bundle";
    }

    public Version getBundleVersion()
    {
        return new Version(1, 0, 0, "SNAPSHOT");
    }

    public List<String> getBundleClassPath()
    {
        return Collections.emptyList();
    }

    public List<NativeCodeDescription> getBundleNativeCodeList()
    {
        return Collections.emptyList();
    }

    public List<String> getBundleRequiredExecutionEnvironment()
    {
        return Collections.emptyList();
    }

    public List<ExportDescription> getExportDescriptions()
    {
        return Collections.emptyList();
    }

    public List<ImportDescription> getImportDescriptions()
    {
        return Collections.emptyList();
    }

    public List<RequireDescription> getRequireDescriptions()
    {
        return Collections.emptyList();
    }

    public List<DynamicDescription> getDynamicDescriptions()
    {
        return Collections.emptyList();
    }

    public FragmentDescription getFragmentDescription()
    {
        return null;  //To change body of implemented methods use File | Settings | File Templates.
    }

    public ResourceLocation registerClassPathElement(String classPathElement) throws BundleException
    {
        return null;
    }

    public LazyActivationDescription getLazyActivationDescription()
    {
        return null;  //Todo: change body of implemented methods use File | Settings | File Templates.
    }

    public boolean isLazyActivationPolicy()
    {
        return false;
    }

    public String loadLibrary(String libname)
    {
        return null;  //todo: consider this autogenerated code
    }

    public Permission[] getPermissionCollection()
    {
        return new Permission[0];  //todo: consider this autogenerated code
    }

    public Enumeration findEntries(String path, String filePattern, boolean includeDirectory, boolean recurse)
    {
        try
        {
            if ("*.xml".equals(filePattern)) return Collections.enumeration(Arrays.asList(new URL("papoose://org.acme.osgi.0:1/com/acme/anvil.xml")));
            if ("*.class".equals(filePattern))
            {
                return Collections.enumeration(Arrays.asList(
                        new URL("papoose://org.acme.osgi.0:1/com/acme/impl/Activator.class"),
                        new URL("papoose://org.acme.osgi.0:1/com/acme/impl/AnvilImpl.class"),
                        new URL("papoose://org.acme.osgi.0:1/com/acme/pvt/Hidden.class"),
                        new URL("papoose://org.acme.osgi.0:1/com/acme/api/AnvilApi.class"),
                        new URL("papoose://org.acme.osgi.0:1/com/acme/safe/Primary.class")
                ));
            }
        }
        catch (MalformedURLException e)
        {
            e.printStackTrace();  //todo: consider this autogenerated code
        }
        return null;  //todo: consider this autogenerated code
    }

    @SuppressWarnings({ "EmptyCatchBlock" })
    public L18nResourceBundle getResourceBundle(Locale locale)
    {
        try
        {
            String path = "org/papoose/core/mock/bundle";
            path += (locale != null ? "_" + locale : "") + ".properties";
            InputStream in = MockArchiveStore.class.getClassLoader().getResourceAsStream(path);
            if (in != null) return new L18nResourceBundle(in);
        }
        catch (IOException ioe)
        {
        }
        return null;
    }

    public InputStream getInputStreamForCodeSource() throws IOException
    {
        return null;  //To change body of implemented methods use File | Settings | File Templates.
    }

    public InputStream getInputStreamForEntry(String path) throws IOException
    {
        return null;  //To change body of implemented methods use File | Settings | File Templates.
    }

    public InputStream getInputStreamForResource(int location, String path) throws IOException
    {
        return null;  //To change body of implemented methods use File | Settings | File Templates.
    }

    public Certificate[] getCertificates()
    {
        return new Certificate[0];  //Todo: change body of implemented methods use File | Settings | File Templates.
    }

    public boolean isSingleton()
    {
        return false;  //Todo: change body of implemented methods use File | Settings | File Templates.
    }

    public FragmentAttachment getFragmentAttachment()
    {
        return null;  //Todo: change body of implemented methods use File | Settings | File Templates.
    }

    public void assignNativeCodeDescriptions(SortedSet<NativeCodeDescription> nativeCodeDescriptions) throws BundleException
    {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    public void close()
    {
        int i = 0;
        //todo: consider this autogenerated code
    }

    public int compareTo(Object o)
    {
        return 0;  //todo: consider this autogenerated code
    }
}
