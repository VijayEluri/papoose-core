/**
 *
 * Copyright 2008 (C) The original author or authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.papoose.core.framework;

import org.osgi.framework.Bundle;
import org.osgi.service.packageadmin.ExportedPackage;
import org.osgi.service.packageadmin.PackageAdmin;
import org.osgi.service.packageadmin.RequiredBundle;

/**
 * @version $Revision$ $Date$
 */
public class PackageAdminImpl implements PackageAdmin
{
    private final Papoose framework;

    public PackageAdminImpl(Papoose framework)
    {
        this.framework = framework;
    }

    /**
     * Gets the exported packages for the specified bundle.
     * <p/>
     * The implementation checks to make sure that the bundle belongs to the
     * same framework instance as the one that this package admin service
     * belongs to.  If not, it returns null.
     *
     * @param bundle The bundle whose exported packages are to be returned, or
     *               null if all exported packages are to be returned. If the
     *               specified bundle is the system bundle (that is, the bundle
     *               with id zero), this method returns all the packages known
     *               to be exported by the system bundle. This will include the
     *               package specified by the
     *               <code>org.osgi.framework.system.packages</code> system
     *               property as well as any other package exported by the
     *               framework implementation.
     * @return An array of exported packages, or null if the specified bundle
     *         has no exported packages.
     */
    public ExportedPackage[] getExportedPackages(Bundle bundle)
    {
        if (bundle == null)
        {

        }
        if (bundle instanceof BundleImpl)
        {
            BundleImpl bundleImpl = (BundleImpl) bundle;
            if (framework.getFrameworkId() == bundleImpl.getFramework().getFrameworkId())
            {

            }
        }
        return null;  //todo: consider this autogenerated code
    }

    public ExportedPackage[] getExportedPackages(String s)
    {
        return new ExportedPackage[0];  //todo: consider this autogenerated code
    }

    public ExportedPackage getExportedPackage(String s)
    {
        return null;  //todo: consider this autogenerated code
    }

    public void refreshPackages(Bundle[] bundles)
    {
        //todo: consider this autogenerated code
    }

    public boolean resolveBundles(Bundle[] bundles)
    {
        return false;  //todo: consider this autogenerated code
    }

    public RequiredBundle[] getRequiredBundles(String s)
    {
        return new RequiredBundle[0];  //todo: consider this autogenerated code
    }

    public Bundle[] getBundles(String s, String s1)
    {
        return new Bundle[0];  //todo: consider this autogenerated code
    }

    public Bundle[] getFragments(Bundle bundle)
    {
        return new Bundle[0];  //todo: consider this autogenerated code
    }

    public Bundle[] getHosts(Bundle bundle)
    {
        return new Bundle[0];  //todo: consider this autogenerated code
    }

    public Bundle getBundle(Class aClass)
    {
        return null;  //todo: consider this autogenerated code
    }

    public int getBundleType(Bundle bundle)
    {
        return 0;  //todo: consider this autogenerated code
    }
}
